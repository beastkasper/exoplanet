// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
// –ó–∞–ø—É—Å–∫: node test-api.js

const API_BASE_URL = "http://localhost:4000/api";

async function testAPI() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NASA Exoplanet API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...\n");

  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ host stars
    console.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/host-stars...");
    const hostStarsResponse = await fetch(`${API_BASE_URL}/host-stars`);
    
    if (!hostStarsResponse.ok) {
      throw new Error(`Host stars API failed: ${hostStarsResponse.status}`);
    }
    
    const hostStars = await hostStarsResponse.json();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${hostStars.length} host stars`);
    console.log(`üìã –ü–µ—Ä–≤—ã–µ 5: ${hostStars.slice(0, 5).join(', ')}\n`);

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ exoplanets
    console.log("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/exoplanets...");
    const exoplanetsResponse = await fetch(`${API_BASE_URL}/exoplanets`);
    
    if (!exoplanetsResponse.ok) {
      throw new Error(`Exoplanets API failed: ${exoplanetsResponse.status}`);
    }
    
    const exoplanets = await exoplanetsResponse.json();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${exoplanets.length} exoplanets`);
    console.log(`üìã –ü–µ—Ä–≤–∞—è –ø–ª–∞–Ω–µ—Ç–∞: ${exoplanets[0]?.pl_name || 'N/A'}\n`);

    // –¢–µ—Å—Ç 3: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π NASA TAP –∑–∞–ø—Ä–æ—Å
    console.log("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/nasa-tap...");
    const query = "select distinct hostname from ps order by hostname asc";
    const nasaTapUrl = `${API_BASE_URL}/nasa-tap?query=${encodeURIComponent(query)}&format=json`;
    console.log(`üîó URL: ${nasaTapUrl}`);
    const nasaTapResponse = await fetch(nasaTapUrl);
    
    if (!nasaTapResponse.ok) {
      throw new Error(`NASA TAP API failed: ${nasaTapResponse.status}`);
    }
    
    const nasaTapData = await nasaTapResponse.json();
    console.log(`‚úÖ NASA TAP –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${nasaTapData.length} –∑–∞–ø–∏—Å–µ–π\n`);

    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
    console.log("üöÄ API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:", error.message);
    console.log("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:");
    console.log("   cd server && npm run start:server");
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAPI();
